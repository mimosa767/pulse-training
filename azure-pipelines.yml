# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Trigger the pipeline on changes to the 'main' branch
trigger:
- main

schedules:
  - cron: "0 0 * * *" # Run daily at midnight
    displayName: Daily midnight trigger
    branches:
      include:
        - main
    always: true # Ensure the schedule runs even if there have been no changes

  - cron: "0 * * * *" # Run every hour
    displayName: Hourly trigger
    branches:
      include:
        - main
    always: true # Ensure the schedule runs even if there have been no changes

jobs:
  - job: TriggerAPI
    pool:
      vmImage: 'ubuntu-latest' # Use the latest Ubuntu virtual machine image
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline' # Specify that the PowerShell script is inline
          script: |
            # Define the base API endpoint URL without the security token
            $baseUrl = "https://demo.perfectomobile.com/services/executions?operation=execute&scriptKey=PUBLIC:stephenPenn/PreSalesDemo-Android-BioMetricv1-SP.xml"
            # Retrieve the API token from the pipeline variables
            $apiToken = "$(API_TOKEN)"
            # Append the security token to the URL
            $url = "$baseUrl&securityToken=$apiToken"

            # Define a function to call the API
            function Invoke-Api {
                param (
                    [string]$url # URL parameter for the API endpoint
                )
                try {
                    Write-Output "Calling API at $url"
                    # Make the API call using the provided URL
                    $response = Invoke-RestMethod -Uri $url -Method Get
                    Write-Output "API response: $($response | ConvertTo-Json -Depth 10)"
                    return $response # Return the API response
                } catch {
                    Write-Error "Error calling API: $_"
                    throw $_
                }
            }

            # Set the maximum number of retry attempts
            $maxRetries = 5
            # Set the interval (in seconds) between retries
            $retryInterval = 60
            # Initialize the retry attempt counter
            $attempt = 0
            # Initialize the success flag
            $success = $false

            # Loop to retry the API call until success or max retries reached
            while ($attempt -lt $maxRetries -and -not $success) {
                try {
                    # Call the API using the Invoke-Api function
                    $response = Invoke-Api -url $url
                    # Check if the API response indicates success
                    if ($response.Status -eq "Success") {
                        Write-Output "API call succeeded." # Output a success message
                        $success = $true # Set the success flag to true
                    } else {
                        # Throw an error if the response status is not "Success"
                        throw "API call failed with status: $($response.Status)"
                    }
                } catch {
                    # Output a retry message
                    Write-Output "Attempt $($attempt + 1) failed. Retrying in $retryInterval seconds..."
                    # Wait for the retry interval before the next attempt
                    Start-Sleep -Seconds $retryInterval
                    # Increment the attempt counter
                    $attempt++
                }
            }

            # Check if all retry attempts failed
            if (-not $success) {
                # Throw an error if the API call failed after all retries
                Write-Error "API call failed after $maxRetries attempts."
                exit 1
            } else {
                # Output a success message after retries
                Write-Output "API call was successful after $($attempt + 1) attempts."
